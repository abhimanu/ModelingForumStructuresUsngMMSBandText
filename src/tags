!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASM_SRCS	../Debug/sources.mk	/^ASM_SRCS := $/;"	m
B	../src/MMSBstructuredMeanField.cpp	/^	matrix<float>* B;$/;"	m	class:MMSB	file:
CC_DEPS	../Debug/sources.mk	/^CC_DEPS := $/;"	m
CC_SRCS	../Debug/sources.mk	/^CC_SRCS := $/;"	m
CPP_DEPS	../Debug/sources.mk	/^CPP_DEPS := $/;"	m
CPP_SRCS	../Debug/sources.mk	/^CPP_SRCS := $/;"	m
CSV_PARSER_FREE_BUFFER_PTR	../src/csv_parser.hpp	98;"	d
CSV_PARSER_FREE_FILE_PTR	../src/csv_parser.hpp	113;"	d
CSV_PARSER_HPP_INCLUDED	../src/csv_parser.hpp	31;"	d
CXX_DEPS	../Debug/sources.mk	/^CXX_DEPS := $/;"	m
CXX_SRCS	../Debug/sources.mk	/^CXX_SRCS := $/;"	m
C_DEPS	../Debug/sources.mk	/^C_DEPS := $/;"	m
C_SRCS	../Debug/sources.mk	/^C_SRCS := $/;"	m
C_UPPER_DEPS	../Debug/sources.mk	/^C_UPPER_DEPS := $/;"	m
C_UPPER_SRCS	../Debug/sources.mk	/^C_UPPER_SRCS := $/;"	m
ENCLOSURE_NONE	../src/csv_parser.hpp	/^	ENCLOSURE_NONE       = 1,$/;"	e	enum:__anon1
ENCLOSURE_OPTIONAL	../src/csv_parser.hpp	/^	ENCLOSURE_OPTIONAL   = 3,$/;"	e	enum:__anon1
ENCLOSURE_REQUIRED	../src/csv_parser.hpp	/^	ENCLOSURE_REQUIRED   = 2,$/;"	e	enum:__anon1
ENCLOSURE_TYPE_BEGIN	../src/csv_parser.hpp	/^	ENCLOSURE_TYPE_BEGIN = 0,$/;"	e	enum:__anon1
ENCLOSURE_TYPE_END	../src/csv_parser.hpp	/^	ENCLOSURE_TYPE_END$/;"	e	enum:__anon1
EXECUTABLES	../Debug/sources.mk	/^EXECUTABLES := $/;"	m
K	../src/MMSBpoisson.cpp	/^	int K;$/;"	m	class:MMSBpoisson	file:
K	../src/MMSBstructuredMeanField.cpp	/^	int K;$/;"	m	class:MMSB	file:
K	../src/MMSBstructuredThreadModel.cpp	/^	int K;            $/;"	m	class:MMSBpoisson	file:
K	../src/MMSBthreadStructureTemplated.cpp	/^	int K;$/;"	m	class:MMSBpoisson	file:
LIBCSV_PARSER_MAJOR_VERSION	../src/csv_parser.hpp	33;"	d
LIBCSV_PARSER_MINOR_VERSION	../src/csv_parser.hpp	35;"	d
LIBCSV_PARSER_PATCH_VERSION	../src/csv_parser.hpp	37;"	d
LIBCSV_PARSER_VERSION_NUMBER	../src/csv_parser.hpp	39;"	d
LIBS	../Debug/objects.mk	/^LIBS :=$/;"	m
MMSB	../src/MMSBstructuredMeanField.cpp	/^MMSB::MMSB(Utils* utils){$/;"	f	class:MMSB
MMSB	../src/MMSBstructuredMeanField.cpp	/^class MMSB{$/;"	c	file:
MMSBStochasticStructuralMeanField	../MMSBStochasticStructuralMeanField.m	/^function[pi,B,alpha] = MMSBStochasticStructuralMeanField(Y, K, maxit, inner_iter)$/;"	f
MMSBStructuralMeanField	../MMSBStructuralMeanField.m	/^function[pi,B,alpha] = MMSBStructuralMeanField(Y, K, maxit, inner_iter)$/;"	f
MMSB_Learn_InnerLoop_Orig	../MMSB_Learn_InnerLoop_Orig.m	/^function [gammahat, B, lastll] = MMSB_Learn_InnerLoop_Orig(y, alpha, B, gammahat, maxit)$/;"	f
MMSB_Learn_Orig	../MMSB_Learn_Orig.m	/^function [ralpha, rB, rll, rpi, gammahat] = MMSB_Learn_Orig(y, K, maxit)$/;"	f
MMSBpoisson	../src/MMSBpoisson.cpp	/^MMSBpoisson::MMSBpoisson(Utils* utils){$/;"	f	class:MMSBpoisson
MMSBpoisson	../src/MMSBpoisson.cpp	/^class MMSBpoisson{$/;"	c	file:
MMSBpoisson	../src/MMSBstructuredThreadModel.cpp	/^MMSBpoisson::MMSBpoisson(Utils* utils){$/;"	f	class:MMSBpoisson
MMSBpoisson	../src/MMSBstructuredThreadModel.cpp	/^class MMSBpoisson{$/;"	c	file:
MMSBpoisson	../src/MMSBthreadStructureTemplated.cpp	/^class MMSBpoisson{$/;"	c	file:
MMSBvariational	../MMSBvariational.m	/^function[pi,B,alpha] = MMSBvariational(Y, K, maxit, inner_iter)$/;"	f
OBJS	../Debug/sources.mk	/^OBJS := $/;"	m
OBJ_SRCS	../Debug/sources.mk	/^OBJ_SRCS := $/;"	m
O_SRCS	../Debug/sources.mk	/^O_SRCS := $/;"	m
RM	../Debug/makefile	/^RM := rm -rf$/;"	m
SUBDIRS	../Debug/sources.mk	/^SUBDIRS := \\$/;"	m
S_UPPER_SRCS	../Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
USER_OBJS	../Debug/objects.mk	/^USER_OBJS :=$/;"	m
UTILS_H_	../src/Utils.h	9;"	d
Utils	../src/Utils.h	/^class Utils {$/;"	c
_get_fields_with_enclosure	../src/csv_parser.cpp	/^void csv_parser::_get_fields_with_enclosure(csv_row_ptr row, const char * line, const unsigned int * line_length)$/;"	f	class:csv_parser
_get_fields_with_optional_enclosure	../src/csv_parser.cpp	/^void csv_parser::_get_fields_with_optional_enclosure(csv_row_ptr row, const char * line, const unsigned int * line_length)$/;"	f	class:csv_parser
_get_fields_without_enclosure	../src/csv_parser.cpp	/^void csv_parser::_get_fields_without_enclosure(csv_row_ptr row, const char * line, const unsigned int * line_length)$/;"	f	class:csv_parser
_read_single_line	../src/csv_parser.cpp	/^void csv_parser::_read_single_line(char ** buffer, unsigned int * buffer_len)$/;"	f	class:csv_parser
_skip_lines	../src/csv_parser.cpp	/^void csv_parser::_skip_lines(void)$/;"	f	class:csv_parser
addWords	../src/Utils.cpp	/^void Utils::addWords(std::vector<int>* wordList, std::vector<std::string>* newWords){$/;"	f	class:Utils
alpha	../src/MMSBpoisson.cpp	/^	boost::numeric::ublas::vector<float>* alpha;$/;"	m	class:MMSBpoisson	file:
alpha	../src/MMSBstructuredMeanField.cpp	/^	boost::numeric::ublas::vector<float>* alpha;$/;"	m	class:MMSB	file:
alpha	../src/MMSBstructuredThreadModel.cpp	/^	boost::numeric::ublas::vector<double>* alpha;$/;"	m	class:MMSBpoisson	file:
alphaStepSize	../src/MMSBpoisson.cpp	/^	static constexpr float alphaStepSize=1e-6;$/;"	m	class:MMSBpoisson	file:
alphaStepSize	../src/MMSBstructuredMeanField.cpp	/^	static const float alphaStepSize=1e-6;$/;"	m	class:MMSB	file:
alphaStepSize	../src/MMSBstructuredThreadModel.cpp	/^	static constexpr double alphaStepSize=1e-6;$/;"	m	class:MMSBpoisson	file:
bDenomSum	../src/MMSBpoisson.cpp	/^	matrix<float>* bDenomSum;$/;"	m	class:MMSBpoisson	file:
bDenomSum	../src/MMSBstructuredMeanField.cpp	/^	matrix<float>* bDenomSum;$/;"	m	class:MMSB	file:
bDenomSum	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* bDenomSum;$/;"	m	class:MMSBpoisson	file:
bucket_size	../src/Utils.h	/^	const size_t bucket_size = 10; \/\/$/;"	m	class:class_hash
class_hash	../src/Utils.h	/^class class_hash{$/;"	c
csv_parser	../src/csv_parser.hpp	/^	csv_parser() : enclosed_char(0x00), 	escaped_char(0x5C),$/;"	f	class:csv_parser
csv_parser	../src/csv_parser.hpp	/^class csv_parser$/;"	c
csv_row	../src/csv_parser.hpp	/^typedef vector <string> csv_row;$/;"	t
csv_row_ptr	../src/csv_parser.hpp	/^typedef csv_row * csv_row_ptr;$/;"	t
dataFunction	../src/MMSBpoisson.cpp	/^float MMSBpoisson::dataFunction(int p,int q,int g,int h){$/;"	f	class:MMSBpoisson
dataFunction	../src/MMSBstructuredMeanField.cpp	/^float MMSB::dataFunction(int p,int q,int g,int h){$/;"	f	class:MMSB
dataFunction	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::dataFunction(int g,int h){$/;"	f	class:MMSBpoisson
dataFunctionPhiUpdates	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::dataFunctionPhiUpdates(int g , int h, int Y_pq){$/;"	f	class:MMSBpoisson
enclosed_char	../src/csv_parser.hpp	/^	char enclosed_char;$/;"	m	class:csv_parser
enclosed_length	../src/csv_parser.hpp	/^	unsigned int enclosed_length;$/;"	m	class:csv_parser
enclosure_type	../src/csv_parser.hpp	/^	enclosure_type_t enclosure_type;$/;"	m	class:csv_parser
enclosure_type_t	../src/csv_parser.hpp	/^} enclosure_type_t;$/;"	t	typeref:enum:__anon1
escaped_char	../src/csv_parser.hpp	/^	char escaped_char;$/;"	m	class:csv_parser
escaped_length	../src/csv_parser.hpp	/^	unsigned int escaped_length;$/;"	m	class:csv_parser
field_term_char	../src/csv_parser.hpp	/^	char field_term_char;$/;"	m	class:csv_parser
field_term_length	../src/csv_parser.hpp	/^	unsigned int field_term_length;$/;"	m	class:csv_parser
gamma	../src/MMSBpoisson.cpp	/^	matrix<float>* gamma;$/;"	m	class:MMSBpoisson	file:
gamma	../src/MMSBstructuredMeanField.cpp	/^	matrix<float>* gamma;$/;"	m	class:MMSB	file:
gamma	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* gamma;$/;"	m	class:MMSBpoisson	file:
getDigamaValue	../src/MMSBpoisson.cpp	/^float MMSBpoisson::getDigamaValue(float value){$/;"	f	class:MMSBpoisson
getDigamaValue	../src/MMSBstructuredMeanField.cpp	/^float MMSB::getDigamaValue(float value){$/;"	f	class:MMSB
getDigamaValue	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::getDigamaValue(double value){$/;"	f	class:MMSBpoisson
getLnGamma	../src/MMSBpoisson.cpp	/^float MMSBpoisson::getLnGamma(float value){$/;"	f	class:MMSBpoisson
getLnGamma	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::getLnGamma(double value){$/;"	f	class:MMSBpoisson
getLogLikelihood	../MMSBStochasticStructuralMeanField.m	/^function ll = getLogLikelihood(gamma,B,alpha,Y,phi)$/;"	f
getLogLikelihood	../MMSBStructuralMeanField.m	/^function ll = getLogLikelihood(gamma,B,alpha,Y,phi)$/;"	f
getLogLikelihood	../MMSBvariational.m	/^function ll = getLogLikelihood(gamma,B,alpha,Y,phi)$/;"	f
getLogLikelihoodOld	../MMSBStochasticStructuralMeanField.m	/^function ll = getLogLikelihoodOld(gamma,B,alpha,Y,phi)$/;"	f
getMatrixRowSum	../src/MMSBpoisson.cpp	/^float MMSBpoisson::getMatrixRowSum(matrix<float>* mat, int row_id, int num_cols){$/;"	f	class:MMSBpoisson
getMatrixRowSum	../src/MMSBstructuredMeanField.cpp	/^float MMSB::getMatrixRowSum(matrix<float>* mat, int row_id, int num_cols){$/;"	f	class:MMSB
getMatrixRowSum	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::getMatrixRowSum(matrix<double>* mat, int row_id, int num_cols){$/;"	f	class:MMSBpoisson
getParameters	../src/MMSBpoisson.cpp	/^void MMSBpoisson::getParameters(matrix<int>* inputMat, int num_users, int K, int iter_threshold, int inner_iter){ \/\/ TODO: change phi coz it is K*K*N*N $/;"	f	class:MMSBpoisson
getParameters	../src/MMSBstructuredMeanField.cpp	/^void MMSB::getParameters(matrix<int>* inputMat, int num_users, int K, int iter_threshold, int inner_iter){ \/\/ TODO: change phi coz it is K*K*N*N $/;"	f	class:MMSB
getParameters	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::getParameters(int iter_threshold, int inner_iter, int nu_iter){ \/\/ TODO: change phi coz it is K*K*N*N $/;"	f	class:MMSBpoisson
getPis	../src/MMSBpoisson.cpp	/^matrix<float>* MMSBpoisson::getPis(){$/;"	f	class:MMSBpoisson
getPis	../src/MMSBstructuredMeanField.cpp	/^matrix<float>* MMSB::getPis(){$/;"	f	class:MMSB
getPis	../src/MMSBstructuredThreadModel.cpp	/^matrix<double>* MMSBpoisson::getPis(){$/;"	f	class:MMSBpoisson
getStepSize	../MMSBStochasticStructuralMeanField.m	/^function step_size = getStepSize(step_iter)$/;"	f
getUniformRandom	../src/MMSBpoisson.cpp	/^float MMSBpoisson::getUniformRandom(){$/;"	f	class:MMSBpoisson
getUniformRandom	../src/MMSBstructuredMeanField.cpp	/^float MMSB::getUniformRandom(){$/;"	f	class:MMSB
getUniformRandom	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::getUniformRandom(){$/;"	f	class:MMSBpoisson
getVariationalLogLikelihood	../src/MMSBpoisson.cpp	/^float MMSBpoisson::getVariationalLogLikelihood(){                \/\/ TODO: change phi coz it is K*K*N*N $/;"	f	class:MMSBpoisson
getVariationalLogLikelihood	../src/MMSBstructuredMeanField.cpp	/^float MMSB::getVariationalLogLikelihood(){                \/\/ TODO: change phi coz it is K*K*N*N $/;"	f	class:MMSB
getVariationalLogLikelihood	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::getVariationalLogLikelihood(){                \/\/ TODO: change phi coz it is K*K*N*N $/;"	f	class:MMSBpoisson
getVecG	../src/MMSBpoisson.cpp	/^boost::numeric::ublas::vector<float>* MMSBpoisson::getVecG(){					\/\/ gradient of L w.r.t alpha$/;"	f	class:MMSBpoisson
getVecG	../src/MMSBstructuredMeanField.cpp	/^boost::numeric::ublas::vector<float>* MMSB::getVecG(){					\/\/ gradient of L w.r.t alpha$/;"	f	class:MMSB
getVecH	../src/MMSBpoisson.cpp	/^boost::numeric::ublas::vector<float>* MMSBpoisson::getVecH(){					\/\/ hessian of L w.r.t alpha$/;"	f	class:MMSBpoisson
getVecH	../src/MMSBstructuredMeanField.cpp	/^boost::numeric::ublas::vector<float>* MMSB::getVecH(){					\/\/ hessian of L w.r.t alpha$/;"	f	class:MMSB
get_record_count	../src/csv_parser.hpp	/^	unsigned int get_record_count(void)$/;"	f	class:csv_parser
get_row	../src/csv_parser.cpp	/^csv_row csv_parser::get_row(void)$/;"	f	class:csv_parser
globalThreshold	../src/MMSBpoisson.cpp	/^	static constexpr float globalThreshold=1e-4;$/;"	m	class:MMSBpoisson	file:
globalThreshold	../src/MMSBstructuredMeanField.cpp	/^	static const float globalThreshold=1e-4;$/;"	m	class:MMSB	file:
globalThreshold	../src/MMSBstructuredThreadModel.cpp	/^	static constexpr double globalThreshold=1e-4;$/;"	m	class:MMSBpoisson	file:
has_more_rows	../src/csv_parser.hpp	/^	bool has_more_rows(void)$/;"	f	class:csv_parser
ignore_num_lines	../src/csv_parser.hpp	/^	unsigned int ignore_num_lines;$/;"	m	class:csv_parser
init	../src/csv_parser.cpp	/^bool csv_parser::init(FILE * input_file_pointer)$/;"	f	class:csv_parser
init	../src/csv_parser.cpp	/^bool csv_parser::init(const char * input_file)$/;"	f	class:csv_parser
initGammaTrue	../MMSBStochasticStructuralMeanField.m	/^function gamma = initGammaTrue()$/;"	f
initGammaTrue	../MMSBStructuralMeanField.m	/^function gamma = initGammaTrue()$/;"	f
initialize	../src/MMSBpoisson.cpp	/^	void initialize(int num_users, int K, matrix<int>* inputMat){$/;"	f	class:MMSBpoisson	file:
initialize	../src/MMSBstructuredMeanField.cpp	/^	void initialize(int num_users, int K, matrix<int>* inputMat){$/;"	f	class:MMSB	file:
initialize	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initialize(int K, std::unordered_set<int>* userList, std::unordered_set<int>* threadList,  $/;"	f	class:MMSBpoisson
initializeAllPhiMats	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeAllPhiMats(){$/;"	f	class:MMSBpoisson
initializeAlpha	../src/MMSBpoisson.cpp	/^void MMSBpoisson::initializeAlpha(){$/;"	f	class:MMSBpoisson
initializeAlpha	../src/MMSBstructuredMeanField.cpp	/^void MMSB::initializeAlpha(){$/;"	f	class:MMSB
initializeAlpha	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeAlpha(){$/;"	f	class:MMSBpoisson
initializeB	../src/MMSBstructuredMeanField.cpp	/^void MMSB::initializeB(){$/;"	f	class:MMSB
initializeGamma	../MMSBStochasticStructuralMeanField.m	/^function gamma = initializeGamma(N,K)$/;"	f
initializeGamma	../MMSBStructuralMeanField.m	/^function gamma = initializeGamma(N,K)$/;"	f
initializeGamma	../MMSBvariational.m	/^function gamma = initializeGamma(N,K)$/;"	f
initializeGamma	../src/MMSBpoisson.cpp	/^void MMSBpoisson::initializeGamma(){$/;"	f	class:MMSBpoisson
initializeGamma	../src/MMSBstructuredMeanField.cpp	/^void MMSB::initializeGamma(){$/;"	f	class:MMSB
initializeGamma	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeGamma(){$/;"	f	class:MMSBpoisson
initializeKappa	../src/MMSBpoisson.cpp	/^void MMSBpoisson::initializeKappa(){$/;"	f	class:MMSBpoisson
initializeKappa	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeKappa(){$/;"	f	class:MMSBpoisson
initializeLambda	../src/MMSBpoisson.cpp	/^void MMSBpoisson::initializeLambda(){$/;"	f	class:MMSBpoisson
initializeLambda	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeLambda(){$/;"	f	class:MMSBpoisson
initializeNu	../src/MMSBpoisson.cpp	/^void MMSBpoisson::initializeNu(){$/;"	f	class:MMSBpoisson
initializeNu	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeNu(){$/;"	f	class:MMSBpoisson
initializeTheta	../src/MMSBpoisson.cpp	/^void MMSBpoisson::initializeTheta(){$/;"	f	class:MMSBpoisson
initializeTheta	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeTheta(){$/;"	f	class:MMSBpoisson
initializeUserIndex	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::initializeUserIndex(unordered_set<int>* userList){  $/;"	f	class:MMSBpoisson
inputMat	../src/MMSBpoisson.cpp	/^	matrix<int>* inputMat;$/;"	m	class:MMSBpoisson	file:
inputMat	../src/MMSBstructuredMeanField.cpp	/^	matrix<int>* inputMat;$/;"	m	class:MMSB	file:
input_filename	../src/csv_parser.hpp	/^	char * input_filename;$/;"	m	class:csv_parser
input_fp	../src/csv_parser.hpp	/^	FILE * input_fp;$/;"	m	class:csv_parser
kappa	../src/MMSBpoisson.cpp	/^	matrix<float>* kappa;$/;"	m	class:MMSBpoisson	file:
kappa	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* kappa;$/;"	m	class:MMSBpoisson	file:
lambda	../src/MMSBpoisson.cpp	/^	matrix<float>* lambda;$/;"	m	class:MMSBpoisson	file:
lambda	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* lambda;$/;"	m	class:MMSBpoisson	file:
line_term_char	../src/csv_parser.hpp	/^	char line_term_char;$/;"	m	class:csv_parser
line_term_length	../src/csv_parser.hpp	/^	unsigned int line_term_length;$/;"	m	class:csv_parser
main	../src/MMSBpoisson.cpp	/^int main(int argc, char** argv) {$/;"	f
main	../src/MMSBstructuredMeanField.cpp	/^int main(int argc, char** argv) {$/;"	f
main	../src/MMSBstructuredThreadModel.cpp	/^int main(int argc, char** argv) {$/;"	f
main	../src/MMSBthreadStructureTemplated.cpp	/^int main(int argc, char** argv) {$/;"	f
min_buckets	../src/Utils.h	/^	const size_t min_buckets = (1<<10);$/;"	m	class:class_hash
more_rows	../src/csv_parser.hpp	/^	bool more_rows;$/;"	m	class:csv_parser
multiplier	../src/MMSBpoisson.cpp	/^	float multiplier;$/;"	m	class:MMSBpoisson	file:
multiplier	../src/MMSBstructuredMeanField.cpp	/^	float multiplier;$/;"	m	class:MMSB	file:
multiplier	../src/MMSBstructuredThreadModel.cpp	/^	double multiplier;$/;"	m	class:MMSBpoisson	file:
nu	../src/MMSBpoisson.cpp	/^	matrix<float>* nu;$/;"	m	class:MMSBpoisson	file:
nu	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* nu;$/;"	m	class:MMSBpoisson	file:
nuIter	../src/MMSBstructuredThreadModel.cpp	/^	int nuIter;$/;"	m	class:MMSBpoisson	file:
num_users	../src/MMSBpoisson.cpp	/^	int num_users;$/;"	m	class:MMSBpoisson	file:
num_users	../src/MMSBstructuredMeanField.cpp	/^	int num_users;$/;"	m	class:MMSB	file:
num_users	../src/MMSBstructuredThreadModel.cpp	/^	int num_users;$/;"	m	class:MMSBpoisson	file:
num_users	../src/MMSBthreadStructureTemplated.cpp	/^	int num_users;$/;"	m	class:MMSBpoisson	file:
operator ()	../src/Utils.h	/^	size_t operator()(const T& key_value) const{$/;"	f	class:class_hash
operator ()	../src/Utils.h	/^    bool operator()(const T& left, const T& right) const{$/;"	f	class:class_hash
phiPQ	../src/MMSBpoisson.cpp	/^	boost::multi_array<float,4>* phiPQ;$/;"	m	class:MMSBpoisson	file:
phiPQ	../src/MMSBstructuredMeanField.cpp	/^	boost::multi_array<float,4>* phiPQ;$/;"	m	class:MMSB	file:
phi_gh_sum	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* phi_gh_sum;$/;"	m	class:MMSBpoisson	file:
phi_lgammaPhi	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* phi_lgammaPhi;$/;"	m	class:MMSBpoisson	file:
phi_logPhi	../src/MMSBstructuredThreadModel.cpp	/^	double phi_logPhi;$/;"	m	class:MMSBpoisson	file:
phi_pg_sum	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* phi_pg_sum;$/;"	m	class:MMSBpoisson	file:
phi_qh_sum	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* phi_qh_sum;$/;"	m	class:MMSBpoisson	file:
phi_y_gh_sum	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* phi_y_gh_sum;$/;"	m	class:MMSBpoisson	file:
plotSimplex	../plotSimplex.m	/^function [] = plotSimplex(A,v)$/;"	f
printMat	../src/MMSBpoisson.cpp	/^void printMat(matrix<T> *mat, int M, int N) {$/;"	f
printMat	../src/MMSBstructuredMeanField.cpp	/^void printMat(matrix<T> *mat, int M, int N) {$/;"	f
printMat	../src/MMSBstructuredThreadModel.cpp	/^void printMat(matrix<T> *mat, int M, int N) {$/;"	f
printMat3D	../src/MMSBpoisson.cpp	/^void printMat3D(boost::multi_array<float,3> *mat, int M, int N, int P) {$/;"	f
printMat3D	../src/MMSBstructuredMeanField.cpp	/^void printMat3D(boost::multi_array<float,3> *mat, int M, int N, int P) {$/;"	f
printMat3D	../src/MMSBstructuredThreadModel.cpp	/^void printMat3D(boost::multi_array<double,3> *mat, int M, int N, int P) {$/;"	f
printNanInMat	../src/MMSBstructuredThreadModel.cpp	/^void printNanInMat(matrix<T> *mat, int M, int N) {$/;"	f
printNegInMat	../src/MMSBstructuredThreadModel.cpp	/^void printNegInMat(matrix<T> *mat, int M, int N) {$/;"	f
printPhi	../src/MMSBpoisson.cpp	/^void MMSBpoisson::printPhi(int p, int q){$/;"	f	class:MMSBpoisson
printPhi	../src/MMSBstructuredMeanField.cpp	/^void MMSB::printPhi(int p, int q){$/;"	f	class:MMSB
printPhiFull	../src/MMSBpoisson.cpp	/^void MMSBpoisson::printPhiFull(){$/;"	f	class:MMSBpoisson
printPhiFull	../src/MMSBstructuredMeanField.cpp	/^void MMSB::printPhiFull(){$/;"	f	class:MMSB
readCsvToMat	../src/Utils.cpp	/^matrix<int> *Utils::readCsvToMat(char* filename, int numRows, int numColumns) {$/;"	f	class:Utils
readFile	../src/Utils.cpp	/^char* Utils::readFile(FILE* graph_file_pointer, int* u1, int* u2, int* tid, char* s) {$/;"	f	class:Utils
readThreadStructureFile	../src/Utils.cpp	/^void Utils::readThreadStructureFile (std::string fileName, std::unordered_set<int>* userList, $/;"	f	class:Utils
record_count	../src/csv_parser.hpp	/^	unsigned int record_count;$/;"	m	class:csv_parser
reset_record_count	../src/csv_parser.hpp	/^	void reset_record_count(void)$/;"	f	class:csv_parser
set_enclosed_char	../src/csv_parser.cpp	/^void csv_parser::set_enclosed_char(char fields_enclosed_by, enclosure_type_t enclosure_mode)$/;"	f	class:csv_parser
set_field_term_char	../src/csv_parser.cpp	/^void csv_parser::set_field_term_char(char fields_terminated_by)$/;"	f	class:csv_parser
set_line_term_char	../src/csv_parser.cpp	/^void csv_parser::set_line_term_char(char lines_terminated_by)$/;"	f	class:csv_parser
set_skip_lines	../src/csv_parser.hpp	/^	void set_skip_lines(unsigned int lines_to_skip)$/;"	f	class:csv_parser
stepSizeMultiplier	../src/MMSBpoisson.cpp	/^	static constexpr float stepSizeMultiplier=0.5;$/;"	m	class:MMSBpoisson	file:
stepSizeMultiplier	../src/MMSBstructuredMeanField.cpp	/^	static const float stepSizeMultiplier=0.5;$/;"	m	class:MMSB	file:
stepSizeMultiplier	../src/MMSBstructuredThreadModel.cpp	/^	static constexpr double stepSizeMultiplier=0.5;$/;"	m	class:MMSBpoisson	file:
stochasticUpdateAlpha	../MMSBStochasticStructuralMeanField.m	/^function alpha_new = stochasticUpdateAlpha(gamma,alpha,step_size)$/;"	f
stochasticUpdateB	../MMSBStochasticStructuralMeanField.m	/^function B_hat = stochasticUpdateB(phi_pq,Y_pq,K,B,step_size)$/;"	f
stochasticUpdateGamma	../MMSBStochasticStructuralMeanField.m	/^function [gamma_p,gamma_q] = stochasticUpdateGamma(phi,alpha,p,q,N,step_size, gamma_p, gamma_q)$/;"	f
terlabel	../terlabel.m	/^function handels=terlabel(label1,label2,label3)$/;"	f
ternaryc	../ternaryc.m	/^function [hd,hcb]=ternaryc(c1,c2,c3,d,symbol)$/;"	f
terplot	../terplot.m	/^function [h,hg,htick]=terplot(number)$/;"	f
testDataStructures	../src/MMSBstructuredThreadModel.cpp	/^void testDataStructures(std::unordered_set<int>* userList, $/;"	f
theta	../src/MMSBpoisson.cpp	/^	matrix<float>* theta;$/;"	m	class:MMSBpoisson	file:
theta	../src/MMSBstructuredThreadModel.cpp	/^	matrix<double>* theta;$/;"	m	class:MMSBpoisson	file:
threadList	../src/MMSBstructuredThreadModel.cpp	/^    std::unordered_set<int>* threadList;                                                                           $/;"	m	class:MMSBpoisson	file:
threshold	../src/MMSBpoisson.cpp	/^	static constexpr float threshold=1e-5;$/;"	m	class:MMSBpoisson	file:
threshold	../src/MMSBstructuredMeanField.cpp	/^	static const float threshold=1e-5;$/;"	m	class:MMSB	file:
threshold	../src/MMSBstructuredThreadModel.cpp	/^	static constexpr double threshold=1e-5;$/;"	m	class:MMSBpoisson	file:
trigamma	../src/Utils.cpp	/^float Utils::trigamma(double x)$/;"	f	class:Utils
updateAlpha	../MMSBStochasticStructuralMeanField.m	/^function alpha_new = updateAlpha(gamma,alpha)$/;"	f
updateAlpha	../MMSBStructuralMeanField.m	/^function alpha_new = updateAlpha(gamma,alpha)$/;"	f
updateAlpha	../MMSBvariational.m	/^function alpha_new = updateAlpha(gamma,alpha)$/;"	f
updateB	../MMSBStochasticStructuralMeanField.m	/^function B = updateB(phi,Y,K)$/;"	f
updateB	../MMSBStructuralMeanField.m	/^function B = updateB(phi,Y,K)$/;"	f
updateB	../MMSBvariational.m	/^function B = updateB(phi,Y,K)$/;"	f
updateB	../src/MMSBstructuredMeanField.cpp	/^void MMSB::updateB(){$/;"	f	class:MMSB
updateGamma	../MMSBStochasticStructuralMeanField.m	/^function gamma_p = updateGamma(phi,alpha,p,N)$/;"	f
updateGamma	../MMSBStructuralMeanField.m	/^function gamma_p = updateGamma(phi,alpha,p,N)$/;"	f
updateGamma	../MMSBvariational.m	/^function gamma_p = updateGamma(phi,alpha,p,N)$/;"	f
updateGamma	../src/MMSBpoisson.cpp	/^void MMSBpoisson::updateGamma(int p){$/;"	f	class:MMSBpoisson
updateGamma	../src/MMSBstructuredMeanField.cpp	/^void MMSB::updateGamma(int p){$/;"	f	class:MMSB
updateGamma	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::updateGamma(int p){$/;"	f	class:MMSBpoisson
updateGammasAndBlockMat	../MMSBStochasticStructuralMeanField.m	/^function [gamma, B, ll, alpha, step_iter] = updateGammasAndBlockMat(gamma,B,alpha,Y,inner_iter,step_iter)$/;"	f
updateGammasAndBlockMat	../MMSBStructuralMeanField.m	/^function [gamma, B, ll] = updateGammasAndBlockMat(gamma,B,alpha,Y,inner_iter)$/;"	f
updateGammasAndBlockMat	../MMSBvariational.m	/^function [gamma, B, ll, alpha, phi] = updateGammasAndBlockMat(gamma,B,alpha,Y,inner_iter, phi)$/;"	f
updateGammasAndBlockMat	../src/MMSBstructuredMeanField.cpp	/^float MMSB::updateGammasAndBlockMat(int inner_iter){\/\/(gamma,B,alpha,Y,inner_iter){$/;"	f	class:MMSB
updateGlobalParams	../src/MMSBpoisson.cpp	/^float MMSBpoisson::updateGlobalParams(int inner_iter){\/\/(gamma,B,alpha,Y,inner_iter){$/;"	f	class:MMSBpoisson
updateGlobalParams	../src/MMSBstructuredThreadModel.cpp	/^double MMSBpoisson::updateGlobalParams(int inner_iter){\/\/(gamma,B,alpha,Y,inner_iter){$/;"	f	class:MMSBpoisson
updateLambda	../src/MMSBpoisson.cpp	/^void MMSBpoisson::updateLambda(){$/;"	f	class:MMSBpoisson
updateLambda	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::updateLambda(){$/;"	f	class:MMSBpoisson
updateNu	../src/MMSBpoisson.cpp	/^void MMSBpoisson::updateNu(){$/;"	f	class:MMSBpoisson
updateNuFixedPoint	../src/MMSBpoisson.cpp	/^void MMSBpoisson::updateNuFixedPoint(float stepSize, int iter){$/;"	f	class:MMSBpoisson
updateNuFixedPoint	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::updateNuFixedPoint(double stepSize){$/;"	f	class:MMSBpoisson
userAdjlist	../src/MMSBstructuredThreadModel.cpp	/^	std::unordered_map< std::pair<int,int>, std::unordered_map<int, int>*, class_hash<pair<int,int>>>* userAdjlist;$/;"	m	class:MMSBpoisson	file:
userIndexMap	../src/MMSBstructuredThreadModel.cpp	/^	unordered_map<int,int>* userIndexMap;			\/\/ <index user> pair$/;"	m	class:MMSBpoisson	file:
userThreadPost	../src/MMSBstructuredThreadModel.cpp	/^    std::unordered_map< std::pair<int,int>, std::vector<int>*, class_hash<pair<int,int>>>* userThreadPost;        $/;"	m	class:MMSBpoisson	file:
utils	../src/MMSBpoisson.cpp	/^	Utils* utils;$/;"	m	class:MMSBpoisson	file:
utils	../src/MMSBstructuredMeanField.cpp	/^	Utils* utils;$/;"	m	class:MMSB	file:
utils	../src/MMSBstructuredThreadModel.cpp	/^	Utils* utils;$/;"	m	class:MMSBpoisson	file:
utils	../src/MMSBthreadStructureTemplated.cpp	/^	Utils* utils;$/;"	m	class:MMSBpoisson	file:
variationalStepCount	../src/MMSBpoisson.cpp	/^	static const  int variationalStepCount=10;$/;"	m	class:MMSBpoisson	file:
variationalStepCount	../src/MMSBstructuredMeanField.cpp	/^	static const  int variationalStepCount=10;$/;"	m	class:MMSB	file:
variationalStepCount	../src/MMSBstructuredThreadModel.cpp	/^	static const  int variationalStepCount=10;$/;"	m	class:MMSBpoisson	file:
variationalUpdatesPhi	../MMSBStochasticStructuralMeanField.m	/^function phi_new = variationalUpdatesPhi(Y_pq,phi_pq,B,gamma_p,gamma_q,alpha,inner_iter)$/;"	f
variationalUpdatesPhi	../MMSBStructuralMeanField.m	/^function phi_new = variationalUpdatesPhi(Y_pq,phi_pq,B,gamma_p,gamma_q,alpha,inner_iter)$/;"	f
variationalUpdatesPhi	../MMSBvariational.m	/^function phi_new = variationalUpdatesPhi(Y_pq,phi_pq,B,gamma_p,gamma_q,alpha,inner_iter)$/;"	f
variationalUpdatesPhi	../src/MMSBpoisson.cpp	/^void MMSBpoisson::variationalUpdatesPhi(int p, int q){$/;"	f	class:MMSBpoisson
variationalUpdatesPhi	../src/MMSBstructuredMeanField.cpp	/^void MMSB::variationalUpdatesPhi(int p, int q){$/;"	f	class:MMSB
variationalUpdatesPhi	../src/MMSBstructuredThreadModel.cpp	/^void MMSBpoisson::variationalUpdatesPhi(int p, int q, int Y_pq, int thread_id){$/;"	f	class:MMSBpoisson
~csv_parser	../src/csv_parser.hpp	/^	~csv_parser()$/;"	f	class:csv_parser
